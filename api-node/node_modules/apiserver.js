/*global console:true, process: true, require:true, exports:true */
var 
url = require('url'),
http = require('http'), 
utils = require('utils'),

VERSION = "1.0.0";

function ApiServer(config, database) {
	var onrequest = utils.applier(this, this._delegate);
	this._config   = config;
	this._server   = http.createServer(onrequest);
	this._database = database;
}

ApiServer.prototype = {
	_listen: function(port) {
		this._server.listen(port);
		console.log("API server listening to port %d...", port);
	},
	_method: function(request) {
		var name = url.parse(request.url).pathname.split('/').pop().toLowerCase();
		if (name === '') { 
			name = 'health'; 
		} else if (!(name in this)) {
			name = 'unknown';
		} else if (!this[name].call || this[name].call && name.substr(0,1) === '_') {
			name = 'unauthorized';
		}
		return utils.applier(this, this[name]);
	},
	_delegate: function(request, response) {
		var method = this._method(request);
		try {
			utils.extractArgs(request, function(args){
				method.call(null, args, response, request);
			});
		} catch(e) {
			console.error(e);
			this._respond(response, { error: 'Unexpected Server Error', status: 500 });
		}
	},
	_respond: function(response, data, headers) {
		var body = '{"error":"Unexpected Server Error"}';
		data = utils.extend({ status: 200 }, data || {});
		headers = utils.extend({ 
			"Content-Type": 'application/json' 
		}, headers || {});
		try { body = JSON.stringify(data);} 
		catch(e) {
			data.status = 500;
			console.error(e);
		}
		response.writeHead(data.status, headers);
		response.end(body);
	},
	health: function(args, response) {
		this._respond(response, { service: 'Munitia API', version: VERSION });
	},
	unknown: function(args, response) {
		this._respond(response, { error: 'Unknown Action', status: 404 });
	},
	unauthorized: function(args, response) {
		this._respond(response, { error: 'Unauthorized Action', status: 401 });
	},
	db_test: function(args, response) {
		var server = this;
		this._database.find({ collection: 'test' }, function(results){
			server._respond(response, results);
		});
	}
};

exports.start = function(config, database) {
	var server = new ApiServer(config, database);
	server._listen(8080);
};